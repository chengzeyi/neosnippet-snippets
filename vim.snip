snippet     if
abbr        if ... endif
options     head
    if ${1:#:CONDITION}
      ${0:TARGET}
    endif

snippet     elseif
alias       elif
abbr        elseif ...
options     head
    elseif ${1:#:CONDITION}
        ${0:TARGET}

snippet     else
alias       el
abbr        else ...
options     head
    else
        ${0:TARGET}

snippet     ifelse
alias       ifel
abbr        if ... else ... endif
options     head
    if ${1:#:CONDITION}
      ${2:TARGET}
    else
      ${3}
    endif

snippet     for
abbr        for ... in ... endfor
options     head
    for ${1:#:VAR} in ${2:#:LIST}
      ${0:TARGET}
    endfor

snippet     while
abbr        while ... endwhile
options     head
    while ${1:#:CONDITION}
      ${0:TARGET}
    endwhile

snippet     function
abbr        func ... endfunc
alias       func
options     head
    function! ${1:#:FUNC_NAME}(${2}) abort
      ${0:TARGET}
    endfunction

snippet     try
abbr        try ... endtry
options     head
    try
      ${1:TARGET}
    endtry

snippet     trycatch
abbr        try ... catch ... endtry
alias       tryc
options     head
    try
      ${1:TARGET}
    catch ${2:#:/PATTERN/}
      ${3}
    endtry

snippet     tryfinally
abbr        try ... finally ... endtry
alias       tryf
options     head
    try
      ${1:TARGET}
    finally
      ${2}
    endtry

snippet     finally
abbr        finally ...
options     head
    finally
      ${0:TARGET}

snippet     catch
abbr        catch /pattern/
options     head
    catch ${1:#:/PATTERN/}
      ${0:TARGET}

snippet     echomsg
alias       log
abbr        echomsg string(...)
options     head
    echomsg string(${1:TARGET})

snippet     command
abbr        command! ... call ...
options     head
    command! ${1:#:COMMAND_NAME} call ${2:#:FUNC_NAME}

snippet     customlist
abbr        customlist complete function
options     head
    function! ${1:#:FUNC_NAME}(arglead, cmdline, cursorpos) abort
      return filter(${2:#:LIST}, 'stridx(v:val, a:arglead) == 0')
    endfunction

snippet     augroup
abbr        augroup with autocmds
options     head
    augroup ${1:#:AUGROUP_NAME}
      autocmd!
      ${0:TARGET}
    augroup END

snippet     redir
abbr        redir => var
options     head
	redir => ${1:#:VAR}
		${2::TARGET}
	redir END

snippet NeoBundle
alias   neobundle
options     head
abbr NeoBundle ''
    NeoBundle '`getreg('+')=='' ? '<\`0\`>' : getreg('+')`'${0}

snippet NeoBundleLazy
alias   neobundlelazy
options     head
abbr NeoBundleLazy ''
    NeoBundleLazy '`getreg('+')=='' ? '<\`0\`>' : getreg('+')`', {
      \ ${0:TARGET}
      \ }

snippet bundle_hooks
options     head
abbr    neobundle hooks
    let s:hooks = neobundle#get_hooks('${1}')
    function! s:hooks.on_source(bundle) abort
      ${0:TARGET}
    endfunction
    unlet s:hooks

snippet     autoload
alias       afunction afunc
options     head
abbr        autoload func ... endfunc
    function! `substitute(matchstr(neosnippet#util#expand('%:p:r'), '/autoload/\zs.*$'), '/', '#', 'g')`#${1:#:FUNC_NAME}(${2:#:ARGS}) abort
      ${0:TARGET}
    endfunction

snippet  cpo_save
alias    cpoptions_save
options     head
abbr     let s:cpo_save = &cpo | set cpo&vim ...
    let s:cpo_save = &cpo
    set cpo&vim

    ${0:TARGET}

    let &cpo = s:cpo_save
    unlet s:save_cpo

snippet s:loaded
alias   sloaded
options head
abbr    if exists('s:loaded_{plugin-name}') | finish | endif ...
    if exists('s:loaded_${1}')
      finish
    endif
    let s:loaded_$1 = 1

snippet g:loaded
alias   gloaded
options head
abbr    if exists('g:loaded_{plugin-name}') | finish | endif ...
    if exists('g:loaded_${1}')
      finish
    endif
    let g:loaded_$1 = 1

snippet modeline
options head
abbr    " vim: {modeline}
    " vim: ${0:foldmethod=marker}

snippet undo_ftplugin
alias   b:undo_ftplugin
options head
abbr    if !exists('b:undo_ftplugin') ...
    if !exists('b:undo_ftplugin')
      let b:undo_ftplugin = ''
    endif

    ${1:TARGET}

    let b:undo_ftplugin .= '
    \ | setlocal ${2:#:OPTION_NAME1< OPTION_NAME2<...}
    \'

snippet python
alias   py
options head
abbr    python <<EOF | EOF
    python << EOF
    ${0:TARGET}
    EOF

snippet python3
alias   py3
options head
abbr    python3 <<EOF | EOF
    python3 << EOF
    ${0:TARGET}
    EOF

snippet lua
options head
abbr    lua <<EOF | EOF
    lua << EOF
    ${0:TARGET}
    EOF

snippet pos_save
options head
abbr    let pos_save = getpos('.') ...
    let pos_save = getpos('.')
    try
      ${0:TARGET}
    finally
      call setpos('.', pos_save)
    endtry

snippet reg_save
alias   register_save
options head
abbr    use register save
    let reg_save_$1 = getreg('${1}')
    let regtype_save_$1 = getregtype('$1')
    try
      ${0:TARGET}
    finally
      call setreg('$1', reg_save_$1, regtype_save_$1)
    endtry

snippet save_option
options head
abbr    use option save
    let $1_save = &${1}
    let &$1 = ${2}
    try
      ${0:TARGET}
    finally
      let &$1 = $1_save
    endtry

snippet debug
abbr    echomsg string([...])
options head
    echomsg string([${0:TARGET}])

snippet version
options word
abbr    v:version > ... || (v:version == ... && has('patch-...'))
    v:version > ${1} || (v:version == $1 && has('patch-${2}'))

snippet version_new
alias   haspatch has_patch versionn
options word
abbr    has('patch-...')
    has('patch-${1}')

snippet has_nvim
alias   hasn
options word
abbr    has('nvim-...')
    has('nvim-${1}')

