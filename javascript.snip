snippet :function
alias   :func
options head
  ${1:#:METHOD_NAME}: function(${2:#:ATTRIBUTE}) {
    ${0:TARGET}
  }

snippet function
alias   func
options word
  function ${1:#:FUNCTION_NAME}(${2:#:ARGUMENT}) {
    ${0:TARGET}
  }

snippet proto
options head
  ${1:#:CLASS_NAME}.prototype.${2:#:METHOD_NAME} = function(${3:#:FIRST_ARGUMENT}) {
    ${0:TARGET}
  };

snippet function;
alias   func;
options word
  function(${1}) { ${0:TARGET} };

snippet if
options head
  if (${1:true}) {
    ${0:TARGET}
  }

snippet ifelse
abbr ifel
options head
  if (${1:true}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet else
options head
  else {
    ${0:TARGET}
  }

snippet elssif
abbr elif
options head
  else if (${1:true}) {
    ${0:TARGET}
  }

snippet for
options head
  for (let ${1:i} = 0; $1 < ${2:#:THINGS}.length; ++$1) {
    ${0:TARGET}
  }

snippet forin
options head
  for (let ${1:i} in ${2:#:THINGS}) {
    ${0:TARGET}
  }

snippet while
options head
  while (${1:true}) {
    ${0:TARGET}
  }

snippet switch
options head
  switch (${1:#:LET}) {
    case ${2:#:VAL}:
      ${0:TARGET}
      break;
  }

snippet try
options head
  try {
    ${0:TARGET}
  }

snippet catch
options word
  catch (${1:e}) {
    ${0:TARGET}
  }

snippet finally
options word
  finally {
    ${0:TARGET}
  }

snippet try_catch
snippet tryc
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet try_catch_finally
snippet trycf
options head
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  } finally {
    ${4}
  }


snippet key_value
abbr    kv
options word
  ${1:#:VALUE_NAME}: ${0:#:VALUE},

#snippet key
#options word
#  ${1:#:KEY}: "${2:#:VALUE}"}${3:, }

snippet setTimeout
options head
  setTimeout(function() { ${0} }, ${1:10});

snippet debugger
alias db
options head
  debugger;

snippet console.log
alias cl
options head
  console.log(${0:TARGET});

snippet console.trace
alias ct
options head
  console.trace();

snippet console.error
alias ce
options head
  console.error(${0:TARGET});

snippet console.warn
alias cw
options head
  console.warn(${0:TARGET});

snippet console.info
alias ci
options head
  console.info(${0:TARGET});

snippet iife
options head
  (function(${1}) {
    'use strict';
    ${0:TARGET}
  })(${2});

snippet js
options head
  JSON.stringify(${1:TARGET}, null, 2);

snippet jsc
options head
  console.log(JSON.stringify(${1:TARGET}, null, 2));

snippet     class
abbr        class {...}
options     head
  class ${1:#:NAME} {
    constructor(${2:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     class_extends
alias       classe
abbr        class extends {...}
options     head
  class ${1:#:NAME} extends ${2:#:SUPERCLASS} {
    constructor(${3:#:ARGS}) {
      ${0:TARGET}
    }
  }

snippet     static
options     head
  static ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     set
options     head
  set ${1:#:NAME}(${2:#:ARGS}) {
    ${0:TARGET}
  }

snippet     get
options     head
  get ${1:#:NAME}() {
    ${0:TARGET}
  }

snippet     import
abbr        import { member, ... } from "module-name";
options     head
  import { ${1:MEMBERS} } from "${0:TARGET}";

snippet     import_default
alias       importd
abbr        import defaultMember from "module-name";
options     head
  import ${1:defaultMember} from "${0:TARGET}";

snippet     import_all
alias       importa
abbr        import * as NAME from "...";
options     head
  import * as ${1:NAME} from "${0:TARGET}";

snippet     import_default_member
alias       importdm
abbr        import defaultMember, { member, ... } from "module-name";
options     head
  import ${1:defaultMember}, { ${2:MEMBERS} } from "${0:TARGET}";

