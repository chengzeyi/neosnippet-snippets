# source go.vim

snippet     main
abbr        func main() {...}
options     head
  func main() {
    ${0:TARGET}
  }

snippet     helloworld
abbr        package main import ("fmt") ...
options     head
  package main

  import (
    "fmt"
  )

  func main() {
    fmt.Printf("Hello, world\n")
  }

snippet     func
abbr        func ...() {...}
options     head
  func ${1:#:FNAME}(${2}) ${3:error} {
    ${0:TARGET:panic("not implemented")}
  }

snippet     funcp
alias       func*
abbr        func () ...() {...}
options     head
  func (${1:p} *${2:#:SNAME}) ${3:#:FNAME}(${4}) ${5:error} {
    ${0:TARGET:panic("not implemented")}
  }

snippet     funcs
abbr        func () ...() {...}
options     head
  func (${1:s} ${2:#:SNAME}) ${3:#:FNAME}(${4}) ${5:error} {
    ${0:TARGET:panic("not implemented")}
  }

snippet     import
abbr        import (...)
options     head
  import (
    ${0:TARGET}
  )

snippet     const
abbr        const (...)
options     head
  const (
    ${0:TARGET}
  )

snippet     package
alias       pack
abbr        package ...
options     head
  package ${1:main}

snippet     errorf
alias       Errorf errf erf
abbr        fmt.Errorf(...)
  fmt.Errorf(${1:TARGET}, ${2})

snippet     sprintf
alias       Springf
abbr        fmt.Sprintf(...)
options     head
  fmt.Sprintf(${1:TARGET}, ${2})

snippet     printf
alias       Pringf ptf
abbr        fmt.Printf(...)
options     head
  fmt.Printf(${1:TARGET}, ${2})

snippet     println
alias       Println
abbr        fmt.Println(...)
options     head
  fmt.Println(${0:TARGET})

snippet     struct
abbr        type ... struct {}
options     head
  type ${1} struct {
    ${0:TARGET}
  }

snippet     interface
abbr        type ... interface {}
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet     for
abbr        for ... {}
options     head
  for ${1} {
    ${0:TARGET}
  }

snippet     fori
abbr        for i := ...; i < ...; i++ {}
options     head
  for ${1:i} := ${2:0}; $1 < ${3}; $1++ {
    ${0:TARGET}
  }

snippet     forri
abbr        for ... {}
options     head
  for ${1:i} := ${2}; $1 >= ${3:0}; $1-- {
    ${0:TARGET}
  }

snippet     forr
abbr        for i := range ... {}
options     head
  for ${1:i} := range ${2:#:ITERATOR} {
    ${0:TARGET}
  }

snippet     fork
abbr        for k := range ... {}
options     head
  for ${1:k} := range ${2:#:ITERATOR} {
    ${0:TARGET}
  }

snippet     forkv
abbr        for k, v := range ... {}
options     head
  for ${1:k}, ${2:v} := range ${3:#:MAP} {
    ${0:TARGET}
  }

snippet     foriv
abbr        for i, v := range ... {}
options     head
  for i, ${1:v} := range ${2:#:MAP} {
    ${0:TARGET}
  }

snippet     for_
abbr        for _, v := range ... {}
options     head
  for _, ${1:v} := range ${2:#:MAP} {
    ${0:TARGET}
  }

snippet     errnil
abbr        err != nil
alias       errn ern
options     word
  err != nil

snippet     if
abbr        if ... {}
  if ${1} {
    ${0:TARGET}
  }

snippet     iferr
alias       ife
abbr        if err != nil {}
  if ${1:${2\}; }err != nil {
    ${0:TARGET}
  }

snippet     ifelse
alias       ifel
abbr        if ... {} else {}
  if ${1} {
    ${2:TARGET}
  } else {
    ${0}
  }

snippet     else
alias       el
abbr        else {}
  else {
    ${0:TARGET}
  }

snippet     elseif
alias       elif
abbr        else if ... {}
  else if ${1} {
    ${0:TARGET}
  }

snippet     switch
abbr        switch {}
options     head
  switch ${1} {
  case ${2}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1}:
    ${0:TARGET}
  }

snippet     case
abbr        case ...: ...
options     head
  case ${1}:
    ${0:TARGET}

snippet     return
abbr        return ...
options     head
  return ${0:TARGET}

snippet     returne
alias       rete
abbr        return ...fmt.Errorf(....)
options     head
  return ${1}fmt.Errorf(${0:TARGET})

snippet     returnn
alias       retn
abbr        return nil
options     head
  return nil

snippet     panic
abbr        panic(...)
options     head
  panic(${0:TARGET:"not implemented"})

snippet     funct
abbr        func Test... (t *testing.T) {...}
options     head
  func Test${1} (t *testing.T) {
    ${0:TARGET}
  }

snippet     funcb
abbr        func Test... (t *testing.B) {...}
options     head
  func Test${1} (t *testing.B) {
    for i := 0; i < ${2:t.N}; i++ {
      ${0:TARGET}
    }
  }

snippet     funcm
abbr        func Test... (t *testing.M) {...}
options     head
  func Test${1} (t *testing.M) {
    ${0:TARGET}
    os.Exit(${2:exitCode})
  }

snippet     testtable
alias       testt
abbr        test := {...}{...} for {t.Run(){...}}
options     head
  tests := []struct {
      name string
      given ${1:string}
      expected ${2:string}
  }{
      {"${3}", "${4}", "${5}",},
  }
  for _, tt := range tests {
      tt := tt
      t.Run(tt.name, func(t *testing.T){
          actual := ${0:#:FNAME}(tt.given)
          if !reflect.DeepEqual(actual, tt.expected) {
              t.Errorf("given(%v): expected %v, actual %v", tt.given, tt.expected, actual)
          }
      })
  }
