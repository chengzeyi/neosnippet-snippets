# source go.vim

snippet     main
abbr        func main() {...}
options     head
  func main() {
    ${0:TARGET}
  }

snippet     helloworld
abbr        package main import ("fmt") ...
options     head
  package main

  import (
    "fmt"
  )

  func main() {
    fmt.Printf("Hello, world\n")
  }

snippet     func
abbr        func ...() {...}
options     head
  func ${1:#:FNAME}(${2}) ${3:error} {
    ${0:TARGET:return nil}
  }

snippet     funcp
abbr        func () ...() {...}
options     head
  func (${1:p} *${2:#:SNAME}) ${3:#:FNAME}(${4}) ${5:error} {
    ${0:TARGET:return nil}
  }

snippet     funcs
abbr        func () ...() {...}
options     head
  func (${1:s} ${2:#:SNAME}) ${3:#:FNAME}(${4}) ${5:error} {
    ${0:TARGET:return nil}
  }

snippet     import
abbr        import (...)
options     head
  import (
    ${0:TARGET}
  )

snippet     const
abbr        const (...)
options     head
  const (
    ${0:TARGET}
  )

snippet     package
abbr        package ...
alias       pack
options     head
  package ${1:main}
  ${0:TARGET}

snippet     sprintf
abbr        fmt.Sprintf(...)
alias       Springf
options     head
  fmt.Sprintf(${1:TARGET}, ${2})

snippet     printf
abbr        fmt.Printf(...)
alias       Pringf
options     head
  fmt.Printf(${1:TARGET}, ${2})

snippet     println
abbr        fmt.Println(...)
alias       Println
options     head
  fmt.Println(${0:TARGET})

snippet     struct
abbr        type ... struct {}
options     head
  type ${1} struct {
    ${0:TARGET}
  }

snippet     interface
abbr        type ... interface {}
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet     for
abbr        for ... {}
options     head
  for ${1} {
    ${0:TARGET}
  }

snippet     forr
abbr        for ...:= range ... {}
options     head
  for ${1:v} := range ${2:#:ITERATOR} {
    ${0:TARGET}
  }

snippet     if
abbr        if ... {}
  if ${1} {
    ${0:TARGET}
  }

snippet     iferr
abbr        if err != nil {}
alias       ife
  if err != nil {
    ${0:TARGET}
  }

snippet     ifelse
abbr        if ... {} else {}
alias       ifel
  if ${1} {
    ${2:TARGET}
  } else {
    ${0}
  }

snippet     else
abbr        else {}
alias       el
  else {
    ${0:TARGET}
  }

snippet     elseif
abbr        else if ... {}
alias       elif
  else if ${1} {
    ${0:TARGET}
  }

snippet     switch
abbr        switch {}
options     head
  switch ${1} {
  case ${2}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1}:
    ${0:TARGET}
  }

snippet     case
abbr        case ...: ...
options     head
  case ${1}:
    ${0:TARGET}

snippet     funct
abbr        func Test... (t *testing.T) {...}
options     head
  func Test${1} (${2:t *testing.T}) {
    for i := 0; i < ${3:t.N}; i++ {
      ${0:TARGET}
    }
  }

snippet     funcb
abbr        func Benchmark... (b *testing.B) {...}
options     head
  func Benchmark${1} (${2:b *testing.B}) {
    for i := 0; i < ${3:b.N}; i++ {
      ${0:TARGET}
    }
  }

snippet     testtable
abbr        var test = {...}{...} for {t.Run(){...}}
alias       testt
options     head
  var tests = []struct {
      name string
      expected string
      given string
  }{
      {"${2}", "${3}", "${4}",},
  }
  for _, tt := range tests {
      tt := tt
      t.Run(tt.name, func(t *testing.T){
          actual := ${1:#:FNAME}(tt.given)
          if actual != tt.expected {
              t.Errorf("given(%s): expected %s, actual %s", tt.given, tt.expected, actual)
          }
      })
  }
