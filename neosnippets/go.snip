source go.vim

snippet     helloworld
abbr        package main import ("fmt") ...
options     head
  package main

  import (
    "fmt"
  )

  func main() {
    fmt.Printf("Hello, world\n")
  }

snippet     func
abbr        func ...() { ... }
alias       fn
options     head
  func ${1:fname}(${2}) ${3:error} {
    ${0:TARGET:return nil}
  }

snippet     funcm
abbr        func () ...() { ... }
alias       fm
options     head
  func (${1:p} *${2:#:sname}) ${3:fname}(${4}) ${5:error} {
    ${0:TARGET:return nil}
  }

snippet     import
abbr        import (...)
alias       im
options     head
  import (
    "${1:fmt}"
  )
  ${0:TARGET}

snippet     package
abbr        package ...
alias       pk
options     head
  package ${1:main}
  ${0:TARGET}

snippet     printf
abbr        fmt.Printf("...\n")
alias       pf
options     head
  fmt.Printf("${1}\n"${2:})

snippet     println
abbr        fmt.Println(...)
alias       pl
options     head
  fmt.Println(${0:TARGET})

snippet     struct
abbr        type ... struct {}
alias       ts
options     head
  type ${1} struct {
    ${0:TARGET}
  }

snippet     interface
abbr        type ... interface {}
alias       ti
options     head
  type ${1} interface {
    ${0:TARGET}
  }

snippet     for
abbr        for ... {}
options     head
  for ${1} {
    ${0:TARGET}
  }

snippet     range
abbr        for ...:= range ... {}
options     head
  for ${1:v} := range ${2:#:iterator} {
    ${0:TARGET}
  }

snippet     if
abbr        if ... {}
options     head
    if ${1:#:condition} {
      ${0:TARGET}
    }

snippet     iferr
abbr        if err != nil {}
alias       ife
options     head
    if err != nil {
      ${0:TARGET}
    }

snippet     switch
abbr        switch {}
options     head
  switch ${1:#:v} {
  case ${2:#:condition}:
    ${0:TARGET}
  }

snippet     select
abbr        select {}
options     head
  select {
  case ${1:#:condition}:
    ${0:TARGET}
  }

snippet     case
abbr        case ...: ...
options     head
  case ${1:#:condition}:
    ${2:TARGET}

snippet     funct
abbr        func Test... (t *testing.T) { ... }
alias       ft
options     head
  func Test${1} (${2:t *testing.T}) {
    for i := 0; i < ${3:t.N}; i++ {
      ${4}
    }
  }

snippet     funcb
abbr        func Benchmark... (b *testing.B) { ... }
alias       fb
options     head
  func Benchmark${1} (${2:b *testing.B}) {
    for i := 0; i < ${3:b.N}; i++ {
      ${4}
    }
  }

snippet     testtable
abbr        var test = {...}{...} for {t.Run(){...}}
options     head
  var tests = []struct {
      name string
      expected string
      given string
  }{
      {"${2}", "${3}", "${4}",},
  }
  for _, tt := range tests {
      tt := tt
      t.Run(tt.name, func(t *testing.T){
          actual := ${1:Function}(tt.given)
          if actual != tt.expected {
              t.Errorf("given(%s): expected %s, actual %s", tt.given, tt.expected, actual)
          }
      })
  }
