snippet class
    ${1:public }class `expand('%:p:t:r')` ${2:extends }{
        ${0:TARGET}
    }

snippet class_inner
alias classi
    ${1:public }class ${2:#:name} ${3:extends }{
        ${0:TARGET}
    }

snippet interface
    ${1:public }interface `expand('%:p:t:r')` ${2:extends }{
        ${0:TARGET}
    }

snippet interface_inner
alias interfacei
    ${1:public }interface ${2:#:name} ${3:extends }{
        ${0:TARGET}
    }

snippet enum
    ${1:public }enum `expand('%:p:t:r')` {
        ${0:TARGET}
    }

snippet enum_innner
alias enumi
    ${1:public }enum ${2:#:name} {
        ${0:TARGET}
    }

snippet method
    ${1:public} ${2:void} ${3:#:name}(${4}) ${5:throws }{
        ${0:TARGET}
    }

snippet method_static
alias methods
    ${1:public} ${2:static} ${3:void} ${4:#:name}(${5}) ${6:throws }{
        ${0:TARGET}
    }

snippet const
    public static final ${1:#:type} ${2:#:var} = ${3};

snippet const_string
alias consts
    public static final String ${1:var} = "${2}";

snippet final
    public final ${1:#:type} ${2:#:var} = ${3};

snippet assert
    assert ${1:#:test} : "${2:#:failure message}";

snippet if
    if (${1}) {
        ${2:TARGET}
    }

snippet ifelse
alias ifel
    if (${1}) {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet else
alias el
    else {
        ${1:TARGET}
    }

snippet elseif
alias elif
    else if (${1}) {
        ${2:TARGET}
    }

snippet while
    while (${1}) {
        ${2:TARGET}
    }

snippet for
    for (${1}; ${2}; ${3}) {
        ${4:TARGET}
    }

snippet fori
    for (int ${1:i} = 0; $1 < ${2}; ++$1) {
        ${0:TARGET}
    }

snippet forri
    for (int ${1:i} = ${2}; $1 >= 0; --$1) {
        ${0:TARGET}
    }

snippet foreach
alias   fore
    for (${1} : ${2}) {
        ${3:TARGET}
    }

snippet switch
    switch (${1}) {
        ${2:TARGET}
    }

snippet case
    case ${1}:
        ${2:TARGET}

snippet break
alias br
    break;

snippet default
alias   de
    default:
        ${0}

snippet try
    try {
        ${1:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    }

snippet try_with
snippet tryw
    try (${1:#:resources}) {
        ${2:TARGET}
    } catch (${3:Exception} ${4:e}) {
        ${5:e.printStackTrace();}
    }

snippet try_finally
snippet tryf
    try {
        ${1:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    } finally {
        ${5}
    }

snippet catch
    catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    }

snippet finally
    finally {
        ${0:TARGET}
    }

snippet throw
snippet th
options word
    throw ${0};

snippet new
    ${1:var} ${2} = new ${3};

snippet conditional
alias   cond
    ${1:#:condition} ? ${2:#:a} : ${3:#:b}

snippet testclass
alias   tc
options head
    public class ${1} extends ${2:TestCase} {
        ${0:TARGET}
    }

snippet test
options head
    public void test${1:#:name}() throws Exception {
        ${0:TARGET}
    }

snippet import
alias   imt
    import ${1};

snippet main
    public class `expand('%:p:t:r')` {
        public static void main(String args[]) {
            ${0:TARGET}
        }
    }

snippet println
options word
    System.out.println(${1});

snippet print
options word
    System.out.print(${1});

snippet format
options word
    System.out.format(${1});

#javadoc
snippet comment
    /**
     * ${0:TARGET}
     */

snippet author
    @author ${0:$TM_FULLNAME}

snippet {code
    {@code ${0}

snippet deprecated
    @deprecated ${0:#:description}

snippet {docRoot
    {@docRoot

snippet {inheritDoc
    {@inheritDoc

snippet {link
    {@link ${1:#:target} ${0:#:label}

snippet {linkplain
    {@linkplain ${1:#:target} ${0:#:label}

snippet {literal
    {@literal ${0}

snippet param
    @param ${1:#:var} ${0:#:description}

snippet return
    @return ${0:#:description}

snippet see
    @see ${0:#:reference}

snippet serial
    @serial ${0:#:description}

snippet sd
    @serialField ${0:#:description}

snippet sf
    @serialField ${1:#:name} ${2:#:type} ${0:#:description}

snippet since
    @since ${0:#:version}

snippet throws
    @throws ${1:#:class} ${0:#:description}

snippet {value
    {@value ${0}

snippet version
alias ver
    @version ${0:#:version}

snippet     helloworld
options     head
  public class `expand('%:p:t:r')` {
    static public void main(String args[]) {
      System.out.println("Hello, world!");
    }
  }
