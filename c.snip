snippet     return
alias       ret
abbr        return ...;
    return${0};

snippet     return0
alias       ret0
abbr        return 0;
    return 0;

snippet     returnn
alias       retn
abbr        return NULL;
    return NULL;

# Control structures {{{
snippet     if
abbr        if () {}
    if (${1}) {
        ${0:TARGET}
    }

# No head option in else/elseif so it can be expanded after "}"
snippet     else
alias       el
abbr        else {}
    else {
        ${0:TARGET}
    }

snippet     elseif
alias       elif
abbr        else if () {}
    else if (${1}) {
        ${0:TARGET}
    }

snippet     ifelse
alias       ifel
abbr        if () {} else {}
    if (${1}) {
        ${2:TARGET}
    } else {
        ${0}
    }

snippet     for
options     head
abbr        for () {}
    for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; ++$2) {
        ${0:TARGET}
    }

# Counter based for's (don't ask for the type or count start)
snippet     fori
options     head
abbr        for (int i ...; ...; ++i) {}
    for (int ${1:i} = 0; $1 < ${2}; ++$1) {
        ${0:TARGET}
    }

# For reverse counter
snippet     forri
options     head
abbr        for (int i ...; ...; --i) {}
    for (int ${1:i} = ${2} - 1; $1 >= 0; --$1) {
        ${0:TARGET}
    }

snippet     fors
options     head
abbr        for (size_t i ...; ...; ++i) {}
    for (size_t ${1:i} = 0; $1 < ${2}; ++$1) {
        ${0:TARGET}
    }

snippet     forrs
options     head
abbr        for (size_t i ...; ...; --i) {}
    for (size_t ${1:i} = ${2} - 1; $1 < $2; --$1) {
        ${0:TARGET}
    }

snippet     while
options     head
abbr        while () {}
    while (${1}) {
        ${0:TARGET}
    }

snippet     do_while
options     head
abbr        do {} while ();
alias       do
    do {
        ${0:TARGET}
    } while (${1});

snippet     switch
options     head
abbr        switch () {}
    switch (${1:#:VAR}) {
        ${0:TARGET}
    }

snippet     case
options     head
abbr        case ...: ...
    case ${1}:
        ${0:TARGET}

snippet     default
options     head
abbr        default: ...
    default:
        ${0:TARGET}

# Ternary conditional operator
snippet     conditional
alias       cond
abbr        ... ? ... : ...
    ${1:#:CONDITION} ? ${2:#:A} : ${3:#:B}

# }}}

# Definition bodies {{{
snippet     function
options     head
alias       func
abbr        type func() {}
    ${1:void} ${2:#:FUNC_NAME}(${3:void}) {
        ${0:TARGET}
    }

snippet     function_declare
options     head
alias       funcd
abbr        type func();
    ${1:void} ${2:#:FUNC_NAME}(${3:void});

snippet     function_full
options     head
alias       funcf
abbr        type func(); type func() {}
    ${1:void} ${2:#:FUNC_NAME}(${3:void});

    $1 $2($3) {
        ${0:TARGET}
    }

snippet     struct
options     head
abbr        struct {};
    struct ${1:#:STRUCT_NAME} {
        ${0:TARGET}
    };

# Typedef struct
snippet     struct_typedef
options     head
alias       structt
abbr        typedef struct {};
    typedef struct ${1:#:STRUCT_NAME} {
        ${0:TARGET}
    } $1;

snippet     enum
options     head
abbr        enum {};
    enum ${1:#:ENUM_NAME} {
        ${0:TARGET}
    };

snippet     main
options     head
abbr        int main(...) {}
    int main(int argc, char *argv[]) {
        ${0:TARGET}
    }

snippet     helloworld
abbr        #include<stdio.h> int main...
options     head
    #include <stdio.h>

    int main(int argc, char *argv[]) {
        printf("Hello, world!\n");
        return 0;
    }

# }}}

# Preprocessing directives {{{
# #INCLUDE <...>
snippet     inc
options     head
alias       include #inc #include
abbr        #include <...>
    #include <${1:stdio}.h>${0}

# #include "..."
snippet     incq
options     head
alias       includeq include_quote #incq #includeq #include_quote
abbr        #include "..."
    #include "${1}.h"${0}

snippet     #if
options     head
abbr        #if ... #endif
    #if ${1}
    ${0:TARGET}
    #endif

snippet     #else
options     head
abbr        #else ...
    #else
    ${0:TARGET}

snippet     #elif
options     head
abbr        #elif ...
    #elif ${1}
    ${0:TARGET}

snippet     ifdef
options     head
alias       #ifdef
abbr        #ifdef ... #endif
    #ifdef ${1:DEBUG}
    ${0:TARGET}
    #endif

snippet     ifndef
options     head
alias       #ifndef
abbr        #ifndef ... #endif
    #ifndef ${1:DEBUG}
    ${0:TARGET}
    #endif

# this snippet used the placeholder instead of a trailing space
snippet     def
options     head
alias       define #def #define
abbr        #define ...
    #define ${0}

snippet     und
options     head
alias       undef #und #undef
abbr        #undef ...
    #undef ${0}

# include-guard
snippet     include_guard
options     head
alias       guard once incg
abbr        #ifndef ... #define ... #endif
    #ifndef ${1:#:SYMBOL}
    #define $1

    ${0:TARGET}

    #endif // $1

snippet     defined
abbr        defined(...)
    defined(${0:TARGET})

# }}}

# Built-in function calls {{{
snippet printf
options head
abbr    printf("...\n", ...);
    printf("${1}\n"${2});

snippet scanf
options head
abbr    scanf("...", ...);
    scanf("${1}", ${2});

snippet fprintf
options head
abbr    fprintf(file, "...\n", ...);
    fprintf(${1:stderr}, "${2}\n"${3});

snippet debug
options head
abbr    fprintf(stderr, "%s:%d\n", __FILE__, __LINE__);
    fprintf(stderr, "%s:%d:${1:%s}\n", __FILE__, __LINE__, ${2:"@DEBUG@"});

snippet FILE
options head
abbr    FILE ... = fopen(); ... fclose();
    FILE *${1:fd} = fopen("${2:#:PATH}", "${3:rb}");
    ${0:TARGET}
    fclose(${1});

snippet fopen
abbr    fopen();
    fopen("${1:#:PATH}", "${2:rb}");

snippet fgets
abbr    fgets(row, length, file);
    fgets(${1:#:ROW}, ${2:#:LENGTH}, ${3:stdin});

snippet fscanf
abbr    fscanf(file, "...", ...);
    fscanf(${1:stdin}, "${2}", ${3});

snippet fwrite
abbr    fwrite(array, size, count, file);
    fwrite(${1:#:ARRAY}, sizeof(${2:#:TYPE}), ${3:#:N_MEMBERS}, ${4:#:FILE});

snippet fread
abbr    fread(array, size, count, file);
    fread(${1:#:ARRAY}, sizeof(${2:#:TYPE}), ${3:#:N_MEMBERS}, ${4:#:FILE});

snippet memcpy
abbr    memcpy(dest, src, nbytes);
    memcpy(${1:#:DEST}, ${2:#:SRC}, ${3:#:NBYTES});

snippet malloc
abbr    malloc(size);
    ($2 *)malloc(${1:#:N_MEMBERS} * sizeof(${2:char}));

snippet calloc
abbr    calloc(n, size);
    ($2 *)calloc(${1:#:N_MEMBERS}, sizeof(${2:char}));

snippet realloc
abbr    realloc(old, size);
    ($3 *)realloc(${1:#:OLD}, ${2:#:N_MEMBERS} * sizeof(${3:char}));

snippet srand
options head
abbr    srand(time(NULL));
    srand(${0:time(NULL)});
# }}}

# Built-in operators and alias {{{
snippet typedef
options head
abbr    typedef ... ...;
    typedef ${1:#:BASE_TYPE} ${2:#:CUSTOM_TYPE};

snippet sizeof
alias   size
options word
abbr    sizeof(...)
    sizeof(${1:TARGET})${0}

snippet sizeof_array
alias   sizeofa
options word
abbr    (sizeof(...) / sizeof(*(...)))
    sizeof(${1:TARGET}) / sizeof(*($1))${0}

snippet static_assert
abbr    static_assert(..., ...);
options head
    static_assert(${1:TARGET}, "${2:#:MESSAGE}");

snippet assert
abbr    assert(...);
options head
    assert(${0:TARGET});

snippet va_list
options head
abbr    va_start(va_list, last_arg); ... ; va_end()
alias   va
    va_list ${1:ap};
    va_start($1, ${2:#:LAST_ARG});
    ${0:TARGET}
    va_end($1);
# }}}

# Comments {{{
snippet comment
abbr    /* ... */
alias   /*
    /* ${0:TARGET} */

snippet     doxy
abbr        /** @brief ...
alias       /**
options     head
    /**
     * @brief ${1:#:FUNCTION DESCRIPTION}
     *
     * @details ${2:#:DETAILED DESCRIPTION}
     *
     * @param ${3:#:PARAM}
     *
     * @return ${4:#:RETURN TYPE}
     */
# }}}

# vim: fdm=marker
