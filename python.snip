snippet     #!
abbr        #!/usr/bin/env python3
alias       shebang
options     head
	#!/usr/bin/env ${1:python3}

snippet     coding
abbr        # -*- coding: utf-8 -*-
options     head
	# -*- coding: ${1:utf-8} -*-

snippet     import
abbr        import ...
options     head
	import ${1}

snippet     import_as
alias       import_as
abbr        import ... as ...
options     head
	import ${1} as ${2}

snippet     from
abbr        from ... import ...
options     head
	from ${1} import ${2}

snippet     from_as
alias       fromas
abbr        from ... import ... as ...
options     head
	from ${1} import ${2} as ${3}

snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:NAME}(${2:object}):

		def __init__(self${3}):
			${0:pass}

snippet     class_doc
alias       classd
abbr        class Class(...): """..."""
options     head
	class ${1:#:NAME}(${2:object}):
		"""${3:#:CLASS DOCUMENTATION}"""

		def __init__(self${4}):
			"""${5:#:__INIT__ DOCUMENTATION}"""
			${0:pass}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:NAME}(${2}):
		${0:pass}

snippet     def_doc
alias       dofd
abbr        def function(...): """..."""
options     head
	def ${1:#:NAME}(${2}):
		"""${3:#:FUNCTION DOCUMENTATION}"""
		${0:pass}

snippet     def_met
alias       defm
abbr        def method(self, ...): ...
options     head
	def ${1:#:NAME}(self${2}):
		${0:pass}

snippet     def_met_doc
alias       defmd
abbr        def method(self, ...): """..."""
options     head
	def ${1:#:NAME}(self${2}):
		"""${3:#:METHOD DOCUMENTATION}"""
		${0:pass}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:CONDITION}:
		${0:pass}

snippet     elif
abbr        elif ...: ...
options     head
	elif ${1:#:CONDITION}:
		${0:pass}

snippet     else
abbr        else: ...
options     head
	else:
		${0:pass}

snippet     condition
alias       cond
abbr        ... if ... else ...
	${1:TARGET} if ${2} else ${0}

snippet     with_open
alias       fileidiom withopen witho
options     head
	with open(${1:#:FILE}, '${2:r}') as ${3:f}:
		${0:pass}

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:i} in ${2:#:LIST}:
		${0:pass}

snippet     if_main
alias       ifmain main
abbr        if __name__ == '__main__': ...
options     head
	if __name__ == '__main__':
		${0:pass}

snippet     raise
abbr        raise ...
options     head
	raise ${1:Exception}${2:(${0\})}

snippet     try_except
alias       trye
abbr        try: ... except ...: ...
options     head
	try:
		${1:pass}
	except ${2:Exception}:
		${3:pass}

snippet     try_finally
alias       tryf
abbr        try: ... finally: ...
options     head
	try:
		${1:pass}
	finally:
		${2:pass}

snippet     try
abbr        try: ...
options     head
	try:
		${0:pass}

snippet     except
abbr        except ...: ...
options     head
	except ${1:Exception}:
		${0:pass}

snippet     finally
abbr        finally: ...
options     head
	finally:
		${0:pass}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:CONDITION}:
		${0:pass}

snippet     with
abbr        with {func}({file}) as :
options     head
	with ${1:open}(${2:#:FILENAME, MODE}) as ${3:f}:
		${0:pass}

snippet     filter
alias       forif
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:LIST} if ${3:#:CONDITION}]

snippet     print
abbr        print(...)
options     word
	print(${0:TARGET})

snippet     getattr
abbr        getattr(..., ...)
options     word
	getattr(${1:#:OBJ}, ${2:#:ATTR})

snippet     setattr
abbr        setattr(..., ...)
	setattr(${1:#:OBJ}, ${2:#:ATTR}, ${3:#:VALUE})

snippet     hasattr
abbr        hasattr(..., ...)
options     word
	hasattr(${1:#:OBJ}, ${2:#:ATTR})

snippet     pdb
abbr        import pdb; ...
	import pdb; pdb.set_trace()

snippet     ipdb
abbr        import ipdb; ...
	import ipdb; ipdb.set_trace()

snippet     ipy
abbr        import ipython; ...
	from IPython import embed; embed()
