snippet class
abbr    ... class Name {}
    ${1:public} class `expand('%:p:t:r')` ${2}{
        ${0:TARGET}
    }

snippet class_inner
alias   classi
abbr    ... class ... {}
    ${1:public} class ${2:#:name} ${3}{
        ${0:TARGET}
    }

snippet interface
abbr    ... interface Name {}
    ${1:public} interface `expand('%:p:t:r')` ${2}{
        ${0:TARGET}
    }

snippet interface_inner
alias   interfacei
abbr    ... interface ... {}
    ${1:public} interface ${2:#:name} ${3}{
        ${0:TARGET}
    }

snippet enum
abbr    ... enum Name {}
    ${1:public} enum `expand('%:p:t:r')` ${2}{
        ${0:TARGET}
    }

snippet enum_inner
alias   enumi
abbr    ... enum ... {}
    ${1:public} enum ${2:#:name} ${3}{
        ${0:TARGET}
    }

snippet method
abbr    ... func() {}
    ${1:public} ${2:void} ${3:#:name}(${4}) ${5}{
        ${0:TARGET}
    }

snippet method_static
alias   methods
abbr    ... static func() {}
    ${1:public} static ${2:void} ${3:#:name}(${4}) ${5}{
        ${0:TARGET}
    }

snippet constructor
alias   cons
abbr    Name(...) {}
    `expand('%:p:t:r')`(${1}) {
        ${0:TARGET}
    }

snippet constructor_inner
alias   consi
abbr    ...(...) {}
    ${1:#:name}(${2}) {
        ${0:TARGET}
    }

snippet const
abbr    public static final type var = ...;
    public static final ${1:#:type} ${2:#:var} = ${3};

snippet const_string
alias   consts
abbr    public static final String var = "...";
    public static final String ${1:var} = "${2}";

snippet final
abbr    public final type var = ...;
    public final ${1:#:type} ${2:#:var} = ${3};

snippet assert
abbr    assert ... : "...";
    assert ${1:#:test} : "${2:#:failure message}";

snippet if
abbr    if () {}
    if (${1}) {
        ${2:TARGET}
    }

snippet ifelse
alias   ifel
abbr    if () {} else {}
    if (${1}) {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet else
alias   el
abbr    else {}
    else {
        ${1:TARGET}
    }

snippet elseif
alias   elif
abbr    else if () {}
    else if (${1}) {
        ${2:TARGET}
    }

snippet while
abbr    while () {}
    while (${1}) {
        ${2:TARGET}
    }

snippet for
abbr    for ( ; ; ) {}
    for (${1}; ${2}; ${3}) {
        ${4:TARGET}
    }

snippet fori
abbr    for (int i = ...; i < ...; ++i) {}
    for (int ${1:i} = 0; $1 < ${2}; ++$1) {
        ${0:TARGET}
    }

snippet forri
abbr    for (int i = ...; i >= ...; --i) {}
    for (int ${1:i} = ${2}; $1 >= 0; --$1) {
        ${0:TARGET}
    }

snippet foreach
alias   fore
abbr    for (... : ...) {}
    for (${1:var} ${2} : ${3}) {
        ${0:TARGET}
    }

snippet return
abbr    return ...;
    return ${0:TARGET};

snippet switch
abbr    switch () {}
    switch (${1}) {
        ${2:TARGET}
    }

snippet case
abbr    case ...: ...
    case ${1}:
        ${2:TARGET}

snippet break
abbr    break;
    break;

snippet default
alias   de
abbr    default: ...
    default:
        ${0}

snippet try
abbr    try {} catch () {}
    try {
        ${1:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    }

snippet try_with
snippet tryw
abbr    try () {} catch () {}
    try (${1:#:resources}) {
        ${2:TARGET}
    } catch (${3:Exception} ${4:e}) {
        ${5:e.printStackTrace();}
    }

snippet try_finally
snippet tryf
abbr    try {} catch () {} finally {}
    try {
        ${1:TARGET}
    } catch (${2:Exception} ${3:e}) {
        ${4:e.printStackTrace();}
    } finally {
        ${5}
    }

snippet catch
abbr    catch () {}
    catch (${1:Exception} ${2:e}) {
        ${3:e.printStackTrace();}
    }

snippet finally
abbr    finally {}
    finally {
        ${0:TARGET}
    }

snippet throw
abbr    throw new ...;
options word
    throw new ${0:Exception};

snippet new
abbr    var ... = new ...;
    ${1:var} ${2} = new ${3:Object}(${4});

snippet conditional
alias   cond
abbr    ... ? ... : ...
    ${1:#:condition} ? ${2:#:a} : ${3:#:b}

snippet test_class
alias   testc
abbr    public class ... extends ... {}
options head
    public class ${1} extends ${2:TestCase} {
        ${0:TARGET}
    }

snippet test_mechod
snippet testm
abbr    public void test...() throws Exception {}
options head
    public void test${1:#:name}() throws Exception {
        ${0:TARGET}
    }

snippet package
abbr    package ...;
    package ${1};

snippet import
abbr    import ...;
    import ${1};

snippet main
abbr    public class Name { public static void main(String args[]) {} }
    public class `expand('%:p:t:r')` {
        public static void main(String[] args) ${1}{
            ${0:TARGET}
        }
    }

snippet main_method
alias   mainm
abbr    public static void main(String args[]) {}
    public static void main(String[] args) ${1}{
        ${0:TARGET}
    }

snippet println
alias   sout
abbr    System.out.println(...);
options word
    System.out.println(${1});

snippet print
abbr    System.out.print(...);
options word
    System.out.print(${1});

snippet format
abbr    System.out.format(...);
options word
    System.out.format(${1});

snippet string_format
alias   stringf
abbr    String.format(...)
options word
    String.format("${1}", ${2})${0}

# javadoc
snippet comment
alias   /*
abbr    /* ... */
    /**
     * ${0:TARGET}
     */

# snippet author
# abbr    @author ...
#     @author ${0:$TM_FULLNAME}

# snippet code
# abbr    {@code ...
#     {@code ${0}

# snippet deprecated
# abbr    @deprecated ...
#     @deprecated ${0:#:description}

# snippet docRoot
# abbr    {@docRoot
#     {@docRoot

# snippet inheritDoc
# abbr    {@inheritDoc
#     {@inheritDoc

# snippet link
# abbr    {@link ... ...
#     {@link ${1:#:target} ${0:#:label}

# snippet linkplain
# abbr    {@linkplain ... ...
#     {@linkplain ${1:#:target} ${0:#:label}

# snippet literal
# abbr    {@literal ...
#     {@literal ${0}

# snippet param
# abbr    @param ... ...
#     @param ${1:#:var} ${0:#:description}

# snippet return
# abbr    @return ...
#     @return ${0:#:description}

# snippet see
# abbr    @see ...
#     @see ${0:#:reference}

# snippet serial
# abbr    @serial ...
#     @serial ${0:#:description}

# snippet sefialField
# abbr    @sefialField ...
#     @serialField ${1:#:name} ${2:#:type} ${0:#:description}

# snippet since
# abbr    @since ...
#     @since ${0:#:version}

# snippet throws
# abbr    @throws ... ...
#     @throws ${1:#:class} ${0:#:description}

# snippet value
# abbr    {@value ...
#     {@value ${0}

# snippet version
# abbr    @version ...
#     @version ${0:#:version}

snippet helloworld
abbr    public class Name { static public void main(String args[]) { ... } }
options head
    public class `expand('%:p:t:r')` {
        static public void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
